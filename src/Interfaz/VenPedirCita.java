/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Logica.DAO.AgendaDAO;
import Logica.DAO.CitaDAO;
import Logica.DAO.ConsultorioDAO;
import Logica.DAO.EspecialidadDAO;
import Logica.DAO.JornadaConsultorioDAO;
import Logica.DAO.MedicoDAO;
import Logica.DAO.SedeDAO;
import Logica.Models.Agenda;
import Logica.Models.Cita;
import Logica.Models.Consultorio;
import Logica.Models.Especialidad;
import Logica.Models.JornadaConsultorio;
import Logica.Models.Medico;
import Logica.Models.Paciente;
import Logica.Models.Sede;
import java.awt.Color;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FliaSalinasRodriguez
 */
public class VenPedirCita extends javax.swing.JFrame {

    CitaDAO citaDAO = new CitaDAO();
    ConsultorioDAO conDAO = new ConsultorioDAO();
    MedicoDAO medicoDAO = new MedicoDAO();
    EspecialidadDAO espDAO = new EspecialidadDAO();
    AgendaDAO agendaDAO = new AgendaDAO();
    JornadaConsultorioDAO jcDAO = new JornadaConsultorioDAO();
    SedeDAO sedeDAO = new SedeDAO();

    Paciente paciente;
    List<Agenda> agendas;
    List<Cita> citas;
    List<Consultorio> cons;
    List<Medico> medicos;
    List<Especialidad> especialidades;
    List<Sede> sedes;
    JornadaConsultorio jc;

    public VenPedirCita(Paciente paciente) {
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
        this.paciente = paciente;

        Especialidades();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCitas = new javax.swing.JTable();
        BtnSolicitar = new javax.swing.JButton();
        BtnCancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbEsp = new javax.swing.JComboBox<>();
        btnConsultar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Fecha", "Hora Inicio", "Consultorio", "Medico"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCitasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCitas);
        if (tblCitas.getColumnModel().getColumnCount() > 0) {
            tblCitas.getColumnModel().getColumn(0).setResizable(false);
            tblCitas.getColumnModel().getColumn(1).setResizable(false);
            tblCitas.getColumnModel().getColumn(2).setResizable(false);
            tblCitas.getColumnModel().getColumn(3).setResizable(false);
        }

        BtnSolicitar.setText("Solicitar");
        BtnSolicitar.setEnabled(false);
        BtnSolicitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSolicitarActionPerformed(evt);
            }
        });

        BtnCancelar.setText("Cancelar");
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Seleccione la Especialidad");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("Citas disponibles");

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(BtnCancelar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 584, Short.MAX_VALUE)
                        .addComponent(BtnSolicitar)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cbEsp, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(265, 265, 265))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnConsultar)
                                .addGap(60, 60, 60))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cbEsp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(btnConsultar)
                .addGap(28, 28, 28)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnSolicitar)
                    .addComponent(BtnCancelar))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        new VenMenuPaciente(paciente);
        dispose();
    }//GEN-LAST:event_BtnCancelarActionPerformed

    private void BtnSolicitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSolicitarActionPerformed
        
        Cita cita;

        try {
            int id = (int) tblCitas.getValueAt(tblCitas.getSelectedRow(), 4);
            cita = citaDAO.obtenerCita(id);
            citaDAO.insertarPaciente(cita, paciente);
            
            citaDAO.insertarEstado(2, cita);
            
            JOptionPane.showMessageDialog(null, "Cita asignada", "Asignar cita médica", JOptionPane.INFORMATION_MESSAGE);
            
            new VenMenuPaciente(paciente);
            dispose();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Cita NO asignada", "Asignar cita médica", JOptionPane.INFORMATION_MESSAGE);
            System.out.println("error sql");
            System.out.println(e);
        }


    }//GEN-LAST:event_BtnSolicitarActionPerformed

    private void Especialidades() {

        especialidades = espDAO.obtenerEspecialidades();

        for (Especialidad esp : especialidades) {
            cbEsp.addItem(esp.getNombre());
        }
    }

    private void insertarCitar(Especialidad esp) {

        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        model.addColumn("Fecha");
        model.addColumn("Hora");
        model.addColumn("Medico");
        model.addColumn("Consultorio");
        model.addColumn("id");

        try {
            citas = citaDAO.obtenerCitasEsp(esp);
            agendas = agendaDAO.obtenerAgendas();
            medicos = medicoDAO.obtenerMedicos();
            cons = conDAO.obtenerConsultorios();
            sedes = sedeDAO.obtenerSedes();

            for (Cita cita : citas) {

                for (Agenda agenda : agendas) {
                    if (cita.getAgenda().getId() == agenda.getId()) {
                        cita.setAgenda(agenda);
                    }
                }

                for (Medico medico : medicos) {
                    if (cita.getAgenda().getMedico().getIdentificacion().equals(medico.getIdentificacion())) {
                        cita.getAgenda().setMedico(medico);

                        jc = jcDAO.obtenerJCMed(medico);
                    }
                }

                for (Consultorio con : cons) {
                    if (con.getId() == jc.getConsultorio().getId()) {
                        jc.setConsultorio(con);
                    }
                }

                for (Sede sede : sedes) {
                    if (jc.getConsultorio().getSede().getId() == sede.getId()) {
                        jc.getConsultorio().setSede(sede);
                    }
                }

                String x = "<html>" + jc.getConsultorio().getSede().getNombre() + "<br>Consultorio: " + jc.getConsultorio().getNumero() + "</html>";

                model.addRow(new Object[]{cita.getFecha(), cita.getHora_inicio(), cita.getAgenda().getMedico().getNombre() + " " + cita.getAgenda().getMedico().getApellido(), x, cita.getId()});
            }

            tblCitas.setModel(model);

            this.tblCitas.setModel(model);
            this.tblCitas.setRowHeight(50);
            this.tblCitas.setGridColor(Color.BLACK);

            DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
            tcr.setVerticalAlignment(SwingConstants.CENTER);
            tcr.setHorizontalAlignment(SwingConstants.CENTER);
            tcr.setBorder(null);

            this.tblCitas.getColumnModel().getColumn(0).setCellRenderer(tcr);
            this.tblCitas.getColumnModel().getColumn(1).setCellRenderer(tcr);
            this.tblCitas.getColumnModel().getColumn(2).setCellRenderer(tcr);
            this.tblCitas.getColumnModel().getColumn(3).setCellRenderer(tcr);
            this.tblCitas.getColumnModel().getColumn(4).setMinWidth(0);
            this.tblCitas.getColumnModel().getColumn(4).setMaxWidth(0);

        } catch (Exception e) {
            System.out.println(e);
        }

    }

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed

        for (Especialidad esp : especialidades) {
            if (cbEsp.getSelectedItem().equals(esp.getNombre())) {
                insertarCitar(esp);
            }
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void tblCitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCitasMouseClicked
        BtnSolicitar.setEnabled(true);
    }//GEN-LAST:event_tblCitasMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnSolicitar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JComboBox<String> cbEsp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCitas;
    // End of variables declaration//GEN-END:variables
}
